#!/bin/sh
# Check integrity of file with provided hash.
# Copyright (C) 2023 Yixi Meta
# Author: Jiaming Zhang
# Change log:
# 2023-01-31
#   version 1.1.1
#     * Bug Fix
#   version 1.1.0
#     * Added notice to usage
#     * Moved OS detection to the beginning of the programme
#     * Added sha512sum
#     * Added function check before call
# 2023-01-30
#   version 1.0.1
#    * Added freebsd support
#   version 1.0.0
#    * First version!
#    * Supported algorithm: md5, sha1sum, sha256sum
self="$(echo "$0" | sed -e 's,.*/,,')"
usage() {
  printf "\033[7mUsage:\033[0m\n   \033[1m%s\033[0m [\033[1m-h\033[0m|\033[1m-?\
\033[0m|\033[1m--help\033[0m] \033[1m-a\033[0m \033[4malgorithm\033[0m [\033[1m\
-f\033[0m|\033[1m--file\033[0m] \033[4mfileName\033[0m [\033[1m-H\033[0m|\033[1\
m--hash\033[0m] \033[4mhash\033[0m\n\n\033[7mSupported algorithm:\033[0m\n   md\
5\n   sha1sum\n   sha256sum\n\033[7mNotice:\033[0m\n   Please note that neither\
 of the supported hash algorithm is portable. However, They are usually present\
ed on mordern OS.\n" "$self"
}
die() {
  printf '\033[1m%s\033[0m\n' "$1" >&2
  exit 1
}
# Detect OS
if [ -f '/etc/os-release' ]; then
  os_release='/etc/os-release'
elif [ -f '/usr/lib/os-release' ]; then
  os_release='/usr/lib/os-release'
fi
if [ -f "${os_release}" ]; then
  OS="$(grep '^ID_LIKE=.*' "${os_release}" || grep 'ID=.*' "${os_release}")"
  OS="${OS#*=}"
  OS="${OS#\"}"
  OS="${OS%\"}"
  OS="${OS#\'}"
  OS="${OS%\'}"
  OS="$(echo "$OS" | tr '[:upper:]' '[:lower:]')"
elif [ ! -f "${os_release}" ]; then
  OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
fi
case "$OS" in
  'darwin'*)
    system='darwin'
    ;;
  debian)
    system='debian'
    ;;
  fedora)
    system='fedora'
    ;;
  'freebsd'*)
    system='freebsd'
    ;;
  'sunos'|solaris)
    system='solaris'
    PATH=$(getconf PATH):PATH
    ;;
  'windowsnt'|'msys'*|'cygwin'*)
    system='windows'
    ;;
  linux|gnu|gnu/*)
    system='linux'
    ;;
  *)
    die 'ERROR: Unknown OS, this programme is uncompatible with your system!'
esac

algm=''
file=''
hash=''

# Get options
while :; do
  case $1 in
    -h|-\?|--help)
      usage
      exit
      ;;
    -a)
      if [ "$2" ]; then
        algm=$2
        shift
      else
        die "ERROR: \x22$1\x22 requires an algorithm name to be used."
      fi
      ;;
    -f|--file)
      if [ "$2" ]; then
        file=$2
        shift
      else
        die "ERROR: \x22$1\x22 requires a file name/path to be checked."
      fi
      ;;
    --file=?*)
      file=${1#*=};;
    --file=)
      die "ERROR: \x22$1\x22 requires a file name/path to be checked.";;
    -H|--hash)
      if [ "$2" ]; then
        hash=$2
        shift
      else
        die "ERROR: \x22$1\x22 requires a hash string to be checked."
      fi
      ;;
    --hash=?*)
      hash=${1#*=};;
    --hash=)
      die "ERROR: \x22$1\x22 requires a hash string to be checked.";;
    --)
      shift
      break;;
    -?*)
      printf '\033[5m\033[1mWARN: Unknown option (ignored): %s\033[0m\n%s\n' "\
$1" "$(usage)" >&2
      exit 128;;
    *)
      break
  esac

  shift
done

# if test "$(expr $# % 2)" == 0; then
if test $# == 2; then
  file=$1
  shift
  hash=$1
  shift
fi
if test $# != 0; then
  printf "\033[5m\033[1m$self: too many arguments\033[0m\n%s\n" "$(usage)" >&2
  exit 1
fi

# Check if file and hash have passed to programme
if [ "$file" == '' ] || [ "$hash" == '' ]; then
  die 'ERROR: File and hash to compare must be given.'
fi

# Main programme
case $algm in
  md5)
    case $system in
      darwin)
        funcCall='md5';;
      debian|freebsd|fedora|linux)
        funcCall='md5sum';;
      solaris)
        funcCall='digest -a md5';;
      windows)
        funcCall='md5sum';;
    esac;;
  sha1sum|sha1)
    case $system in
      darwin)
        funcCall='shasum -a 1';;
      debian|freebsd|fedora|linux)
        funcCall='sha1sum';;
      solaris)
        funcCall='digest -a sha1';;
      windows)
        funcCall='sha1sum';;
    esac;;
  sha256sum|sha256)
    case $system in
      darwin)
        funcCall='shasum -a 256';;
      debian|freebsd|fedora|linux)
        funcCall='sha256sum';;
      solaris)
        funcCall='digest -a sha256';;
      windows)
        funcCall='sha256sum';;
    esac;;
  sha512sum|sha512)
    case $system in
      darwin)
        funcCall='shasum -a 512';;
      debian|freebsd|fedora|linux)
        funcCall='sha512sum';;
      solaris)
        funcCall='digest -a sha512';;
      windows)
        funcCall='sha512sum';;
    esac;;
  *)
    die 'ERROR: Unknown or unsupported algorithm'
esac
if ! which $funcCall; then
  printf "\033[1mERROR: The %s is either not available in your OS or uncallable\
 by this programme.\033[0m\n" "$algm" >&2
  exit 1
fi
digest="$($funcCall "$file" | sed "s;$file;;g" | sed 's; ;;g')"
digest="${digest#*=}"
if [ "$digest" == "$hash" ]; then
  printf 'INFO: Hash of \033[4m%s\033[0m match the given hash.\n' "$file"
else
  printf "\033[1;31mWARN: Hash of \033[4m%s\033[0;1m does NOT match the given h\
ash!\033[0m\n" "$file"
fi
